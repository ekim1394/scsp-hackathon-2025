/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as UsersIndexImport } from './routes/users.index'
import { Route as PostsIndexImport } from './routes/posts.index'
import { Route as UsersMeImport } from './routes/users.me'
import { Route as PostsPostIdImport } from './routes/posts.$postId'
import { Route as CommentsMeImport } from './routes/comments.me'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UsersIndexRoute = UsersIndexImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => rootRoute,
} as any)

const PostsIndexRoute = PostsIndexImport.update({
  id: '/posts/',
  path: '/posts/',
  getParentRoute: () => rootRoute,
} as any)

const UsersMeRoute = UsersMeImport.update({
  id: '/users/me',
  path: '/users/me',
  getParentRoute: () => rootRoute,
} as any)

const PostsPostIdRoute = PostsPostIdImport.update({
  id: '/posts/$postId',
  path: '/posts/$postId',
  getParentRoute: () => rootRoute,
} as any)

const CommentsMeRoute = CommentsMeImport.update({
  id: '/comments/me',
  path: '/comments/me',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/comments/me': {
      id: '/comments/me'
      path: '/comments/me'
      fullPath: '/comments/me'
      preLoaderRoute: typeof CommentsMeImport
      parentRoute: typeof rootRoute
    }
    '/posts/$postId': {
      id: '/posts/$postId'
      path: '/posts/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdImport
      parentRoute: typeof rootRoute
    }
    '/users/me': {
      id: '/users/me'
      path: '/users/me'
      fullPath: '/users/me'
      preLoaderRoute: typeof UsersMeImport
      parentRoute: typeof rootRoute
    }
    '/posts/': {
      id: '/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsIndexImport
      parentRoute: typeof rootRoute
    }
    '/users/': {
      id: '/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/comments/me': typeof CommentsMeRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/users/me': typeof UsersMeRoute
  '/posts': typeof PostsIndexRoute
  '/users': typeof UsersIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/comments/me': typeof CommentsMeRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/users/me': typeof UsersMeRoute
  '/posts': typeof PostsIndexRoute
  '/users': typeof UsersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/comments/me': typeof CommentsMeRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/users/me': typeof UsersMeRoute
  '/posts/': typeof PostsIndexRoute
  '/users/': typeof UsersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/comments/me'
    | '/posts/$postId'
    | '/users/me'
    | '/posts'
    | '/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/comments/me'
    | '/posts/$postId'
    | '/users/me'
    | '/posts'
    | '/users'
  id:
    | '__root__'
    | '/'
    | '/comments/me'
    | '/posts/$postId'
    | '/users/me'
    | '/posts/'
    | '/users/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CommentsMeRoute: typeof CommentsMeRoute
  PostsPostIdRoute: typeof PostsPostIdRoute
  UsersMeRoute: typeof UsersMeRoute
  PostsIndexRoute: typeof PostsIndexRoute
  UsersIndexRoute: typeof UsersIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CommentsMeRoute: CommentsMeRoute,
  PostsPostIdRoute: PostsPostIdRoute,
  UsersMeRoute: UsersMeRoute,
  PostsIndexRoute: PostsIndexRoute,
  UsersIndexRoute: UsersIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/comments/me",
        "/posts/$postId",
        "/users/me",
        "/posts/",
        "/users/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/comments/me": {
      "filePath": "comments.me.tsx"
    },
    "/posts/$postId": {
      "filePath": "posts.$postId.tsx"
    },
    "/users/me": {
      "filePath": "users.me.tsx"
    },
    "/posts/": {
      "filePath": "posts.index.tsx"
    },
    "/users/": {
      "filePath": "users.index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
